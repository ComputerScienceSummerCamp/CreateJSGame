window.addEventListener("load",init);
function init() {
    exp = [
        'この文書がHTML5で書かれていることを示します。',
        '要素内で使用されているのはEnglish(英語)であることを示します。',
        '<head></head>で挟まれた部分で文書の構造を定義していきます。',
        '文字コードがUTF-8であることを示します。',
        'ページのタイトルを決めます。ここではshootingですね。',
        'この1行で"CreateJS"を読み込んでいます。\nこれがないとCreateJSは動きません。',
        '<script></script>で挟まれた部分でJavaScriptを記述していきます。',
        'CreateJSの読み込みが終わった時にinit関数を動かし始めます。\nこれが無いとCreateJSの準備が出来る前にコードが動き始めてしまい、\n非常に都合が悪いですね。',
        '',
        'ここから、CreateJSの読み込みが終わった時に動かし始める\ninit関数を書いていきます。',
        'CreateJSはstageの作成から始まります。\nletは変数を宣言する文の頭に付けましょう。',
        'count変数を宣言します。\nこれは後で敵キャラの処理をするときに使います。',
        'enemyList配列を宣言します。\n配列として使いたいので, =[]をつけておきましょう。',
        '同様に、bulletList(弾の配列)を宣言します。',
        'scene変数を宣言します。\nタイトル画面で0、ゲーム画面で1として使い分けます。',
        '',
        'bg(background:背景)の変数を宣言し、それを図形で初期化します。\nnew createjs.Shape()と書くことで、その変数を図形として\n取り扱うことが出来ます。',
        'bg.graphics.beginFill("black")は「この図形は黒で塗りつぶす」という意味。\nさらに続けて、drawRect(0,0,960,540)としていますが、これは\n「(0,0)から幅960、高さ540の長方形を描く」ことを意味します。',
        'stageにbgを加えます。\nこの文を入れないとどこにも属さないままになります。',
        '',
        'bgと同じようにplayer変数を図形として宣言します。',
        '「この図形は白色で塗りつぶす」とし、さらに\n(0,0)から半径10の円を描きます。',
        'stageにplayerを加えます。',
        '',
        'titleText変数を宣言します。\nテキストの初期化は、new createjs.Text("文字","フォント","色")で表します。',
        'titleTextの基準点のx座標を480にします。',
        'titleTextの基準点のy座標を50にします。',
        'titleTextを中央ぞろえにします。\nこうすることで、x座標480を中心として文字を表示することが\n出来るようになります。',
        'stageにtitleTextを加えます。',
        '',
        'stage上でクリックするとhandleClick関数が実行されるように設定します。',
        '',
        'フレームレートを60FPSに変更します。',
        '毎フレームごとに実行される関数としてhandleTick関数を設定します。',
        '',
        '以下、handleClick関数を定義していきます。',
        'sceneが0であれば、{}で囲まれたコードを実行します。\n===は左右の値が等しいかどうかを判定するときに用います。',
        'ここではsceneを1にしています。\nもしこの文章を取り除けば、sceneは画面をクリックするまで0のままです。',
        'stageからtitleTextを取り除きます。\n以降、再びstage.addChild(titleText)を呼ぶまでtitleTextは表示されません。',
        'sceneが0でなければ、{}で囲まれたコードを実行します。\nelseは「if文の条件を満たさなければ」という意味です。',
        '',
        'bullet変数を新たに図形として宣言します。',
        'bulletは白色、(0,0)から半径3の円を描きます。',
        'bulletのx座標をplayerのx座標に合わせます。',
        'bulletのy座標をplayerのy座標に合わせます。\nこうすることで、playerから弾が発射されるのを再現できます。',
        '',
        'bulletListという配列に今作ったbulletを追加します。\n以降はこの配列の要素の1つとしてbulletを取り扱います。',
        'stageにbulletを追加します。',
        'else以降の処理はここまでです。',
        'handleClick関数はここまでです。',
        '',
        '以下、handleTick関数を定義していきます。',
        'sceneが0であれば、{}で囲まれたコードを実行します。',
        'stageを現在の状態に更新します。\n図形を動かしたり、新たにstageに追加したらstage.update()が\n必要になります。なので、毎フレーム自動実行するように\nここに記述するとよいでしょう。',
        'sceneが0の時の処理はここまでです。',
        '',
        'sceneが1であれば、{}で囲まれたコードを実行します。\nsceneが取りうる値は0か1なのでここはelseでも同じですね。',
        '',
        'playerのx座標をマウスのx座標に合わせます。',
        'playerのy座標をマウスのy座標に合わせます。\n自機はマウスで操作しているんですね。',
        '',
        'countを100で割った余りが0の時、{}で囲まれた処理を実行します。\n後で「countは毎フレーム1増える」と宣言するので、\n100フレームに1回この処理が行われるということになります。',
        'enemy変数を新たに図形として宣言します。',
        'enemyは赤色、(0,0)から半径10の円を描きます。',
        '',
        'enemyのx座標を960に設定します。これはstageの最も右端ですね。',
        'enemyのy座標を0~540の範囲でランダムに設定します。\nMath.random()は0以上1未満の数値を返すので、それをx倍すれば\n0以上x未満の数値を乱数として得られますね。',
        '',
        'stageにenemyを追加します。',
        'enemyListという配列に今作ったenemyを追加します。\n以降はこの配列の要素の1つとしてenemyを取り扱います。',
        '100フレームに1回行う処理はここまでです。',
        'countを1増やします。ここからの処理は毎フレーム行われます。',
        '',
        'iを0からenemyListの要素数-1までループで回します。\nこうすることで、enemyListのすべての要素について次の命令を\n実行できます。',
        'enemyList[i] (enemyListのi+1番目)のx座標を2だけ減らします。\n画面の左方向に動かすということです。',
        'enemyListの各要素に対する処理はここまでです。',
        '',
        '同様に、bulletListの各要素に対して次の処理を行います。',
        'bulletList[i]のx座標を10だけ足します。\n弾は右方向に早く進むということです。',
        'bulletListの各要素に対する処理はここまでです。',
        '',
        '再度、enemyListの各要素に対して次の処理を行います。',
        'enemyLocal変数を次のように定義します。\nこうすることで、enemyList[i]とplayerの当たり判定を考えることが\n出来るようになります。',
        'enemyList[i]とplayerが重なっていれば次の処理を行います。\nこれは「こういうものだ」と割り切ったほうが良いかもしれません。',
        'gameOver関数を実行します。\ngameOver関数の内容は後で記述します。',
        'enemyList[i]とplayerが重なっていた時の処理はここまでです。',
        'enemyListの各要素に対する処理はここまでです。',
        '',
        'bulletListの各要素に対して次の処理を行います。',
        'そのループの中でさらにenemyListの各要素に対して次の処理を行います。\nこの二重ループにより、敵と弾の関係全てを見ることが出来ます。',
        'bulletList[i]とenemyList[j]の当たり判定を考えるために、\nlocalPoint変数を宣言します。',
        'bulletList[i]とenemyList[j]が重なっていた時、次の処理を行います。',
        'stageからbulletList[i]を取り除きます。',
        'bulletListからbulletList[i]だけ取り除きます。',
        '',
        'stageからenemyList[j]を取り除きます。',
        'enemyListからenemyList[j]だけ取り除きます。',
        '弾が敵に当たった時の処理はここまでです。',
        'enemyListの各要素に対する処理はここまでです。\nこれをすべての弾に対して行います。',
        'bulletListの各要素に対する処理はここまでです。',
        '',
        'ここまで終わったら、stageを再描画します。\n敵と当たった弾は消え、他はそれぞれ前進しているはずです。',
        'sceneが1の時の処理はここまでです。',
        '毎フレーム実行するhandleTick関数はここまでです。',
        '',
        'title関数を定義していきます。\n//が先頭についている(コメントアウトされている)ので、実際には\n実行されない部分です。',
        'titleTextを文字無し、サイズは24ピクセル、フォントはゴシック体、\n文字色は白で初期化します。',
        'stageにtitleTextを加えます。',
        'title関数はここまでです。',
        '',
        'titleClick関数を定義していきます。\nこれも実際には実行されません。',
        'sceneを1にします。\nタイトルをクリックしたらゲームが始まる、といった具合です。',
        'titleClick関数はここまでです。',
        '',
        'gameOver関数を定義していきます。\nこの関数はhandleTick関数の中にありましたね。',
        '「ゲームオーバー」とページ上にメッセージを表示させます。',
        '',
        'Tickerに関するすべてのリスナー(ある動作があった時に実行される関数)\nを削除します。この場合はhandleTick関数のみです。',
        'stageに関するすべてのリスナーを削除します。\nこの場合はhandleClick関数ですね。',
        'gameOver関数はここまでです。',
        'CreateJSを読み込んだ時に実行されるinit関数はここまでです。',
        '',
        '',
        'JavaScriptはここまでです。',
        '文書の構造を定義するheadタグはここまでです。',
        '<body></body>で挟まれた部分で、実際に画面に表示されるものを\n定義していきます。',
        '幅960、高さ540のキャンバスを設置します。\n今まで書いてきたJavaScriptはこのキャンバス上で動きます。',
        'bodyタグはここまでです。',
        'htmlタグはここまでです。'
    ];
}